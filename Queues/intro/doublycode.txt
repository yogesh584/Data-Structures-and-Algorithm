#include <bits/stdc++.h> 
class Deque
{
    int *arr;
    int size;
    int start;
    int end;
public:
    // Initialize your data structure.
    Deque(int n)
    {
        size = n;
        arr = new int[size];
        start = end = -1;
    }

    // Pushes 'X' in the front of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushFront(int x)
    {
        if ((start == 0 && end == size - 1) || (start != 0 && end == (start - 1) % (size - 1)))
        {
            return false;
        }

        if (start == -1)
        {
            start = end = 0;
        }

        else if (start == 0 && end != size - 1)
        {
            start = size - 1;
        }
        else
        {
            start--;
        }
        arr[start] = x;
        return true;
    }

    // Pushes 'X' in the back of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushRear(int x)
    {
        /*      CHECKING THAT QUEUE IS FULL OT NOT      */
        if ((start == 0 && end == size - 1) || (start != 0 && end == (start - 1) % (size - 1)))
        {
            return false;
        }

        if (start == -1)
        {
            start = end = 0;
        }

        else if ((end == size - 1) && (start != 0))
        {
            end = 0;
        }
        else
        {
            end++;
        }

        arr[end] = x;
        return true;
    }

    // Pops an element from the front of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popFront()
    {
        if(start == -1){
            return -1;
        }
        int ans = arr[start];
        arr[start] = -1;
        if(start == end){        // single elem is present.
            start = end = -1;
        }
        else if(start == size-1){
            start = 0;        // to maintain cyclic nature.
        }
        else {
            start++;
        }
        
        return ans;
    }

    // Pops an element from the back of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popRear()
    {
        if(start == -1){
            return -1;
        }
        int ans = arr[end];
        arr[end] = -1;
        if(start == end){        // single elem is present.
            start = end = -1;
        }
        else if(end == 0){
            end = size-1;
        }
        else {
            end--;
        }
        
        return ans;
    }

    // Returns the first element of the deque. If the deque is empty, it returns -1.
    int getFront()
    {
        if(isEmpty()){
            return -1;
        }
        else{
            return arr[start];
        }
    }

    // Returns the last element of the deque. If the deque is empty, it returns -1.
    int getRear()
    {
        if(isEmpty()){
            return -1;
        }
        else{
            return arr[end];
        }
    }

    // Returns true if the deque is empty. Otherwise returns false.
    bool isEmpty()
    {
        if(start == -1){
            return true;
        }
        else{
            return false;
        }
    }

    // Returns true if the deque is full. Otherwise returns false.
    bool isFull()
    {
        if ((start == 0 && end == size - 1) || (start != 0 && end == (start - 1) % (size - 1)))
        {
            return true;
        }
        return false;
    }
};